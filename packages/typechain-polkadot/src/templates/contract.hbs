/* This file is auto-generated */

import type { ApiPromise } from '@polkadot/api';
import type { KeyringPair } from '@polkadot/keyring/types';
import { ContractPromise } from '@polkadot/api-contract';
import ABI from '{{{abiDirRelPath}}}/{{{fileName}}}.json';
import QueryMethods from '../query/{{{fileName}}}';
import BuildExtrinsicMethods from '../build-extrinsic/{{{fileName}}}';
import TxSignAndSendMethods from '../tx-sign-and-send/{{{fileName}}}';
import MixedMethods from '../mixed-methods/{{{fileName}}}';
{{#if additionalImports.length}}
{{#each additionalImports}}
import { {{#each values}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}} } from '{{{path}}}';
{{/each}}{{/if}}

export default class Contract {
	readonly query : QueryMethods;
	readonly buildExtrinsic : BuildExtrinsicMethods;
	readonly tx : TxSignAndSendMethods;
	readonly methods : MixedMethods;

	readonly address : string;
	readonly signer : KeyringPair;

	private nativeContract : ContractPromise;
	private nativeAPI : ApiPromise;

	constructor(
		address : string,
		signer : KeyringPair,
		nativeAPI : ApiPromise,
	) {
		this.address = address;
		this.nativeContract = new ContractPromise(nativeAPI, ABI, address);
		this.nativeAPI = nativeAPI;
		this.signer = signer;

		this.query = new QueryMethods(this.nativeContract, signer.address);
		this.buildExtrinsic = new BuildExtrinsicMethods(this.nativeContract);
		this.tx = new TxSignAndSendMethods(nativeAPI, this.nativeContract, signer);
		this.methods = new MixedMethods(nativeAPI, this.nativeContract, signer);
	}

	get name() : string {
		return this.nativeContract.abi.info.contract.name.toString();
	}

	withSigner(signer : KeyringPair) : Contract {
		return new Contract(this.address, signer, this.nativeAPI);
	}

	withAddress(address : string) : Contract {
		return new Contract(address, this.signer, this.nativeAPI);
	}

	withAPI(api : ApiPromise) : Contract {
		return new Contract(this.address, this.signer, api);
	}
}