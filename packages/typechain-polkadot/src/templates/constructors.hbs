import {CodePromise} from "@polkadot/api-contract";
import type {KeyringPair} from "@polkadot/keyring/types";
import Files from "fs";
import type {ApiPromise} from "@polkadot/api";
import {_signAndSend, SignAndSendSuccessResponse} from "../_sdk/tx";
import type {ConstructorOptions} from "../_sdk/types";
import type * as ArgumentTypes from '../types-arguments/{{{fileName}}}';
import type BN from 'bn.js';

export default class Constructors {
	readonly nativeAPI: ApiPromise;
	readonly signer: KeyringPair;

	constructor(
		nativeAPI: ApiPromise,
		signer: KeyringPair,
	) {
		this.nativeAPI = nativeAPI;
		this.signer = signer;
	}

	{{#each methods}}
	/**{{#if args.length}}
     {{#each args}}
     * @param {{{name}}} - {{{@index}}}
    {{/each}}
    {{/if}} */
    async "{{{toCamelCase name}}}" (
    {{#each args}}
    	{{{name}}}: {{{type.tsStr}}},
    {{/each}}
    	__options ? : ConstructorOptions,
    ) {
    	const __contract = JSON.parse(Files.readFileSync("{{{../pathToContractFile}}}").toString());

		const code = new CodePromise(this.nativeAPI, __contract, __contract.source.wasm);

		const gasLimit = 100000 * 1000000 || __options?.gasLimit;
		const storageDepositLimit = __options?.storageDepositLimit;

		const tx = code.tx["{{{toCamelCase originalName}}}"]!({ gasLimit, storageDepositLimit, value: __options?.value }, {{#each args}}{{{name}}}{{#unless @last}}, {{/unless}}{{/each}});

		let response;
		try {
			response = await _signAndSend(this.nativeAPI.registry, tx, this.signer);
		}
		catch (error) {
			console.log(error);
		}

		return {
			result: response as SignAndSendSuccessResponse,
			// @ts-ignore
			address: (response as SignAndSendSuccessResponse)!.result!.contract.address.toString(),
		}
   	}

    {{/each}}
}